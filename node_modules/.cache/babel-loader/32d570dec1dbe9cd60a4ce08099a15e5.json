{"ast":null,"code":"// import { createContext, useState, useEffect } from 'react'\n// import jwt_decode from \"jwt-decode\";\n// import { useNavigate } from 'react-router-dom'\n// export const AuthContext = createContext()\n// const AuthProvider = ({children}) => {\n//     let [authTokens, setAuthTokens] = useState(JSON.parse(localStorage.getItem('authTokens')) || null)\n//     let [user, setUser] = useState(()=> localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n//     let [loading, setLoading] = useState(true)\n//     const history = useNavigate()\n//     let loginUser = async (e )=> {\n//         console.log(\"executeddd\")\n//         e.preventDefault()\n//         let response = await fetch('http://127.0.0.1:8000/api/token/', {\n//             method:'POST',\n//             headers:{\n//                 'Content-Type':'application/json'\n//             },\n//             body:JSON.stringify({'id': e.target.id.value, 'username':e.target.username.value, 'password':e.target.password.value})\n//         })\n//         let data = await response.json()\n//         console.log(data)\n//         if(response.status === 200){\n//             setAuthTokens(data)\n//             setUser(jwt_decode(data.access))\n//             localStorage.setItem('authTokens', JSON.stringify(data))\n//         }else{\n//             alert('Something went wrong!')\n//         }\n//     }\n//     let logoutUser = () => {\n//         setAuthTokens(null)\n//         setUser(null)\n//         localStorage.removeItem('authTokens')\n//     }\n//     let updateToken = async ()=> {\n//         let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n//             method:'POST',\n//             headers:{\n//                 'Content-Type':'application/json'\n//             },\n//             body:JSON.stringify({'refresh':authTokens?.refresh})\n//         })\n//         let data = await response.json()\n//         if (response.status === 200){\n//             setAuthTokens(data)\n//             setUser(jwt_decode(data.access))\n//             localStorage.setItem('authTokens', JSON.stringify(data))\n//         }else{\n//             logoutUser(false)\n//         }\n//         if(loading){\n//             setLoading(false)\n//         }\n//     }\n//     let contextData = {\n//         user:user,\n//         authTokens:authTokens,\n//         loginUser:loginUser,\n//         logoutUser:logoutUser,\n//     }\n//     useEffect(()=> {\n//         if(loading){\n//             updateToken()\n//         }\n//         let fourMinutes = 1000 * 60 * 4\n//         let interval =  setInterval(()=> {\n//             if(authTokens){\n//                 updateToken()\n//             }\n//         }, fourMinutes)\n//         return ()=> clearInterval(interval)\n//     }, [authTokens, loading])\n//     return(\n//         <AuthContext.Provider value={{user, contextData, setAuthTokens, setUser}} >\n//             {children}\n//         </AuthContext.Provider>\n//     )\n// }\n// export default AuthProvider;","map":{"version":3,"sources":["/mnt/c/capstone/connect/src/context/AuthContext.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { createContext, useState, useEffect } from 'react'\n// import jwt_decode from \"jwt-decode\";\n// import { useNavigate } from 'react-router-dom'\n\n// export const AuthContext = createContext()\n\n// const AuthProvider = ({children}) => {\n//     let [authTokens, setAuthTokens] = useState(JSON.parse(localStorage.getItem('authTokens')) || null)\n//     let [user, setUser] = useState(()=> localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n//     let [loading, setLoading] = useState(true)\n\n//     const history = useNavigate()\n\n//     let loginUser = async (e )=> {\n//         console.log(\"executeddd\")\n//         e.preventDefault()\n//         let response = await fetch('http://127.0.0.1:8000/api/token/', {\n//             method:'POST',\n//             headers:{\n//                 'Content-Type':'application/json'\n//             },\n//             body:JSON.stringify({'id': e.target.id.value, 'username':e.target.username.value, 'password':e.target.password.value})\n//         })\n//         let data = await response.json()\n//         console.log(data)\n//         if(response.status === 200){\n//             setAuthTokens(data)\n//             setUser(jwt_decode(data.access))\n//             localStorage.setItem('authTokens', JSON.stringify(data))\n            \n//         }else{\n//             alert('Something went wrong!')\n//         }\n//     }\n\n//     let logoutUser = () => {\n//         setAuthTokens(null)\n//         setUser(null)\n//         localStorage.removeItem('authTokens')\n    \n//     }\n\n//     let updateToken = async ()=> {\n\n//         let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n//             method:'POST',\n//             headers:{\n//                 'Content-Type':'application/json'\n//             },\n//             body:JSON.stringify({'refresh':authTokens?.refresh})\n//         })\n\n//         let data = await response.json()\n        \n//         if (response.status === 200){\n//             setAuthTokens(data)\n//             setUser(jwt_decode(data.access))\n//             localStorage.setItem('authTokens', JSON.stringify(data))\n//         }else{\n//             logoutUser(false)\n//         }\n\n//         if(loading){\n//             setLoading(false)\n//         }\n//     }\n\n//     let contextData = {\n//         user:user,\n//         authTokens:authTokens,\n//         loginUser:loginUser,\n//         logoutUser:logoutUser,\n//     }\n\n\n//     useEffect(()=> {\n\n//         if(loading){\n//             updateToken()\n//         }\n\n//         let fourMinutes = 1000 * 60 * 4\n\n//         let interval =  setInterval(()=> {\n//             if(authTokens){\n//                 updateToken()\n//             }\n//         }, fourMinutes)\n//         return ()=> clearInterval(interval)\n\n//     }, [authTokens, loading])\n\n//     return(\n//         <AuthContext.Provider value={{user, contextData, setAuthTokens, setUser}} >\n//             {children}\n//         </AuthContext.Provider>\n//     )\n// }\n\n// export default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}