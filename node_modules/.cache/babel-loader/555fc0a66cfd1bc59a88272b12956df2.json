{"ast":null,"code":"var _jsxFileName = \"/mnt/c/capstone/connect/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\nconst AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setAuthTokens] = useState(JSON.parse(localStorage.getItem('authTokens')) || null);\n  let [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null);\n  let [loading, setLoading] = useState(true);\n  const history = useNavigate();\n\n  let loginUser = async e => {\n    console.log(\"executeddd\");\n    e.preventDefault();\n    let response = await fetch('http://127.0.0.1:8000/api/token/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'id': e.target.id.value,\n        'username': e.target.username.value,\n        'password': e.target.password.value\n      })\n    });\n    let data = await response.json();\n    console.log(data);\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n    } else {\n      alert('Something went wrong!');\n    }\n  };\n\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n  };\n\n  let updateToken = async () => {\n    let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'refresh': authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n    } else {\n      logoutUser(false);\n    }\n\n    if (loading) {\n      setLoading(false);\n    }\n  };\n\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n\n    let fourMinutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, fourMinutes);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      contextData,\n      setAuthTokens,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"4tKLMmAdzGJFMokmK5D3M/9fN7g=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/mnt/c/capstone/connect/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwt_decode","useNavigate","AuthContext","AuthProvider","children","authTokens","setAuthTokens","JSON","parse","localStorage","getItem","user","setUser","loading","setLoading","history","loginUser","e","console","log","preventDefault","response","fetch","method","headers","body","stringify","target","id","value","username","password","data","json","status","access","setItem","alert","logoutUser","removeItem","updateToken","refresh","contextData","fourMinutes","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from 'react'\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from 'react-router-dom'\n\nexport const AuthContext = createContext()\n\nconst AuthProvider = ({children}) => {\n    let [authTokens, setAuthTokens] = useState(JSON.parse(localStorage.getItem('authTokens')) || null)\n    let [user, setUser] = useState(()=> localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n    let [loading, setLoading] = useState(true)\n\n    const history = useNavigate()\n\n    let loginUser = async (e )=> {\n        console.log(\"executeddd\")\n        e.preventDefault()\n        let response = await fetch('http://127.0.0.1:8000/api/token/', {\n            method:'POST',\n            headers:{\n                'Content-Type':'application/json'\n            },\n            body:JSON.stringify({'id': e.target.id.value, 'username':e.target.username.value, 'password':e.target.password.value})\n        })\n        let data = await response.json()\n        console.log(data)\n        if(response.status === 200){\n            setAuthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n            \n        }else{\n            alert('Something went wrong!')\n        }\n    }\n\n    let logoutUser = () => {\n        setAuthTokens(null)\n        setUser(null)\n        localStorage.removeItem('authTokens')\n    \n    }\n\n    let updateToken = async ()=> {\n\n        let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n            method:'POST',\n            headers:{\n                'Content-Type':'application/json'\n            },\n            body:JSON.stringify({'refresh':authTokens?.refresh})\n        })\n\n        let data = await response.json()\n        \n        if (response.status === 200){\n            setAuthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n        }else{\n            logoutUser(false)\n        }\n\n        if(loading){\n            setLoading(false)\n        }\n    }\n\n    let contextData = {\n        user:user,\n        authTokens:authTokens,\n        loginUser:loginUser,\n        logoutUser:logoutUser,\n    }\n\n\n    useEffect(()=> {\n\n        if(loading){\n            updateToken()\n        }\n\n        let fourMinutes = 1000 * 60 * 4\n\n        let interval =  setInterval(()=> {\n            if(authTokens){\n                updateToken()\n            }\n        }, fourMinutes)\n        return ()=> clearInterval(interval)\n\n    }, [authTokens, loading])\n\n    return(\n        <AuthContext.Provider value={{user, contextData, setAuthTokens, setUser}} >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}